import{_ as e,c as t,ag as l,o as i}from"./chunks/framework.DB9ukh8c.js";const c=JSON.parse('{"title":"RegExp","description":"","frontmatter":{},"headers":[],"relativePath":"RegExp/index.md","filePath":"RegExp/index.md","lastUpdated":1746499306000}'),r={name:"RegExp/index.md"};function n(p,a,d,o,s,h){return i(),t("div",null,a[0]||(a[0]=[l('<h1 id="regexp" tabindex="-1">RegExp <a class="header-anchor" href="#regexp" aria-label="Permalink to &quot;RegExp&quot;">​</a></h1><h2 id="非捕获组" tabindex="-1">非捕获组 <a class="header-anchor" href="#非捕获组" aria-label="Permalink to &quot;非捕获组&quot;">​</a></h2><p>语法:(?:pattern)</p><ul><li><p>例如:^animate-step-(\\d+)(?:-(end|start))?$</p></li><li><p>其中(?:-(end|start))是非捕获组,只匹配不捕获</p></li></ul><p>实例 1:animate-step-74-end</p><ul><li><p>第一组 (\\d+) 捕获 74</p></li><li><p>第二组 (end|start) 捕获 end</p></li><li><p>非捕获组 (?:-(end|start)) 匹配 -end，但是不会被捕获。</p></li></ul><p>实例 2:animate-step-123</p><ul><li>第一组 (\\d+) 捕获 123</li><li>没有匹配到 -end 或 -start，因此第二组和非捕获组都没有匹配。</li></ul><h2 id="肯定前瞻" tabindex="-1">肯定前瞻 <a class="header-anchor" href="#肯定前瞻" aria-label="Permalink to &quot;肯定前瞻&quot;">​</a></h2><p>语法:(?=pattern)</p><ul><li>肯定前瞻用于检查某个位置后面是否跟着一个特定的模式，但它不会把这个模式包括在匹配结果中</li></ul><h2 id="否定前瞻" tabindex="-1">否定前瞻 <a class="header-anchor" href="#否定前瞻" aria-label="Permalink to &quot;否定前瞻&quot;">​</a></h2><p>语法:(?!pattern)</p><ul><li>否定前瞻用于检查某个位置后面是否不跟着特定的模式</li></ul><h2 id="肯定后向断言" tabindex="-1">肯定后向断言 <a class="header-anchor" href="#肯定后向断言" aria-label="Permalink to &quot;肯定后向断言&quot;">​</a></h2><p>语法:(?&lt;=pattern)</p><ul><li>肯定后向断言用于检查某个位置前面是否紧跟着特定的模式，但不会把这个模式包括在匹配结果中</li></ul><h2 id="否定后向断言" tabindex="-1">否定后向断言 <a class="header-anchor" href="#否定后向断言" aria-label="Permalink to &quot;否定后向断言&quot;">​</a></h2><p>语法:(?&lt;!pattern)</p><ul><li>否定后向断言用于检查某个位置前面是否不跟着特定的模式</li></ul>',20)]))}const x=e(r,[["render",n]]);export{c as __pageData,x as default};
